[
  {
    "id": 40,
    "question": "Create a class called User with name, age and salary as its members. You must define a constructor for all these 3 members along with their getters and setters. You also need to have its toString() method overridden. The actual output should match the expected output presented to you under the Expected Output section.",
    "input": "List<User> users = Arrays.asList(\n\t\t\tnew User(\"C\", 30, 25000), \n\t\t\tnew User(\"D\", 40, 150000), \n\t\t\tnew User(\"A\", 10, 10000), \n\t\t\tnew User(\"B\", 20, 300000), \n\t\t\tnew User(\"E\", 50, 90000));",
    "expectedOutput": "Users sorted by Age:\nUser{name='A', age=10, salary=10000}\nUser{name='B', age=20, salary=300000}\nUser{name='C', age=30, salary=25000}\nUser{name='D', age=40, salary=150000}\nUser{name='E', age=50, salary=90000}\nMax Age is: 50\nTotal of Salaries is: 575000\nAll User Names: C, D, A, B, E",
    "solution": "List<User> sortedCustomUserList = users.stream().sorted(Comparator.comparingInt(User::getAge)).collect(Collectors.toList());\nsortedCustomUserList.forEach(System.out::println);\n\nInteger maxAge = users.stream().mapToInt(User::getAge).max().orElseThrow(NoSuchElementException::new);\nSystem.out.println(\"Max Age is: \" + maxAge);\n\nInteger sumSal = users.stream().map(User::getSalary).reduce(0, Integer::sum);\nSystem.out.println(\"Total of Salaries is: \" + sumSal);\n\nString userNames = users.stream().map(User::getName).collect(Collectors.joining(\", \")).toString();\nSystem.out.println(userNames);"
  },
  {
    "id": 41,
    "question": "Print all the animals using streams.",
    "input": "",
    "expectedOutput": "Lion\nElephant\nPenguin\nSnake\nDolphin\nEagle\nTiger\nCrocodile\nGiraffe\nHawk\nHawk",
    "solution": "animals.stream().forEach(i -> System.out.println(i.getName()));"
  },
  {
    "id": 42,
    "question": "Print all the Birds only.",
    "input": "",
    "expectedOutput": "Penguin\nEagle\nHawk\nHawk",
    "solution": "animals.stream().filter(i -> i.getType().equals(\"Bird\")).forEach(i -> System.out.println(i.getName()));"
  },
  {
    "id": 43,
    "question": "Find the fist Hawk",
    "input": "",
    "expectedOutput": "(Name=Hawk,Type=Bird,Weight=2.0,Height=0.6)",
    "solution": "var hawk = animals.stream().filter(i -> i.getName().equals(\"Hawk\")).findFirst();\nif (hawk.isPresent()) {print(hawk.get());}"
  }
]
